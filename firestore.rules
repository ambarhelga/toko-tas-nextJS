/**
 * @fileoverview Firestore Security Rules for BagTrendz User Profiles
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user can only
 * access their own profile data.  No listing of users is allowed.
 *
 * Data Structure:
 * All user data is stored under `/users/{userId}`.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied.
 * - Only authenticated users can create their own profiles.
 * - Updates and deletes are restricted to the profile owner.
 *
 * Denormalization for Authorization:
 *  - Path-based ownership is automatically guaranteed because the user ID is
 *  part of the path itself. No extra `get()` calls or document fields are
 *  required to check ownership. The `userId` parameter of the path always
 *  matches `request.auth.uid` for authorized operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profile data, ensuring only the authenticated user can read/write their own data.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their profile at /users/user_abc if the id field matches.
     * @allow (get, update, delete) - User with UID 'user_abc' can read, update, or delete their profile at /users/user_abc.
     * @deny (create) - User with UID 'user_xyz' cannot create a profile at /users/user_abc.
     * @deny (get, update, delete) - User with UID 'user_xyz' cannot read, update, or delete the profile at /users/user_abc.
     * @deny (list) -  No one can list all the users.
     * @principle Enforces strict user-ownership for all operations on user profiles.
     */
    match /users/{userId} {
      // Helper function to check if the requesting user is the owner of the profile.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the requesting user is the owner of an existing profile.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Allow a user to create their own profile if the UID matches the userId in the path.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;

      // Only the profile owner can read their profile.
      allow get: if isOwner(userId);

      // No one can list all the users.
      allow list: if false;

      // Only the profile owner can update their profile, the id is immutable.
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;

      // Only the profile owner can delete their profile.
      allow delete: if isExistingOwner(userId);
    }
  }
}